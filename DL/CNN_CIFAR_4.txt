from keras.datasets import cifar10
import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

# a. Loading and preprocessing the data.
((train_images, train_labels),(test_images, test_labels))=cifar10.load_data()
train_images=train_images/255.0
test_images=test_images/255.0
class_names = ['airplpane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']

plt.figure(figsize=(10,10))
for i in range(10):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i])
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()

# b. Defining the model's architecture 
model = models.Sequential()
model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(32,32,3)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation='relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))
model.summary()

# Training the model
from keras.losses import SparseCategoricalCrossentropy
from keras.optimizers import SGD
sgd=SGD(0.01)
model.compile(loss='sparse_categorical_crossentropy',optimizer='sgd', metrics=['accuracy'])
epoch=10
h=model.fit(train_images,train_labels, validation_data=(test_images,test_labels), epochs=epoch)

# Model performance
test_loss, test_acc = model.evaluate(test_images, test_labels)
print("Test Loss: {}, Test Accuracy: {}".format(test_loss, test_acc))

plt.plot(h.history['accuracy'], label='acc', color='red')
plt.plot(h.history['val_accuracy'], label='val_acc', color='green')
plt.legend()

print(h.history.keys())

plt.plot(h.history['accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(h.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

image_index = 3333
plt.imshow(test_images[image_index].reshape(32, 32, 3),cmap='Greys')
pred = model.predict(test_images[image_index].reshape(1, 32, 32, 3))
print(pred.argmax())